function [Result_Ls,NumFlag]=LeastSquareLine(DataIn)
%**************************************************************************
%**************************************************************************
%**************************************************************************
%函数功能：输入点集，利用最小二乘法拟合点集中包含的直线段，输出直线参数
%输入：三维数据点集DataIn
%     其中，1）DataIn为2×p×q的三维矩阵，q代表2×p的二维矩阵个数，2为二维矩
%              阵的行数，p为二维矩阵的列数。
%              输入的第j个2×p的二维矩阵表示为：
%              SetOut[:,:,j]=|x1 x2 ... xj|
%                            |y1 y2 ... yj|
%              x,y分别为笛卡尔坐标系中的横纵坐标
%输出：二维数据集数Result_Ls,NumFlag
%     其中，1）Result_Ls为2×q的二维矩阵，2为二维矩阵的行数，q为二维矩阵的列
%              数(代表直线段的个数)。
%              输出的第i个2×q的二维矩阵表示为：
%              Result_Ls[2,i]=|a|
%                             |b|
%             拟合直线段在笛卡尔坐标系中表示为：y=ax+b，a为斜率，b为截距。
%          2）NumFlag为1×q的二维矩阵，q为二维矩阵的列数(代表直线段的个数)。
%             NumFlag=|Num1 Num2 Num3 ... Numq|
%             Num代表对应直线段的对应集合中非零点的个数，主要用于后续程序的
%             绘图。
%作者：Shaofeng Wu 
%时间：2018.08.31
%邮箱：shaofeng693@126.com
%**************************************************************************
%**************************************************************************
%**************************************************************************

K=0; 
Result_Ls=zeros(2,size(DataIn,3));
NumFlag=zeros(1,size(DataIn,3));
for j=1:size(DataIn,3)
    K=1;
    for i=1:size(DataIn,2)
        if DataIn(1,i,j)~=0 || DataIn(2,i,j)~=0
            X_Ls1(K,1)=DataIn(1,i,j);
            X_Ls1(K,2)=1;
            Y_Ls1(K,1)=DataIn(2,i,j);
            NumFlag(j)=K;%记录有几个非零点
            K=K+1;
        end
    end
    Result_Ls(:,j)=inv(X_Ls1'*X_Ls1)*X_Ls1'*Y_Ls1;
    X_Ls1=0;
    Y_Ls1=0;
end